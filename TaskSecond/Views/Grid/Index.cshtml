
@(Html.Kendo().Grid<TaskSecond.Models.Book>()
                  .Name("grid")
                  .Columns(columns =>
                  {
                      columns.Bound(c => c.BookName);
                      columns.Bound(c => c.Pages);
                      columns.Bound(c => c.Genre);
                      columns.Bound(c => c.Publisher);
                      columns.Bound(c => c.Authors).ClientTemplate("#= renderMultiSelectText(data.Authors) #")
                         .EditorTemplateName("AuthorsEditor");
                      columns.Command(command => { command.Destroy(); }).Width(180);
                  })
                  .ToolBar(toolbar =>
                  {
                      toolbar.Create();
                      toolbar.Save();
                  })
                  .Editable(editable => editable.Mode(GridEditMode.InCell))
                  .Pageable()
                  .Selectable(selectable =>
                  {
                      selectable.Mode(GridSelectionMode.Single);
                      selectable.Type(GridSelectionType.Row);
                  })
                  .Scrollable()
                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .Batch(true)
                      .Model(model => model.Id(p => p.BookId))
                      .Read(read => read.Action("Books_Read", "Grid"))
                      .Create(create => create.Action("Books_Create", "Grid"))
                      .Update(update => update.Action("Books_Update", "Grid"))
                      .Destroy(destroy => destroy.Action("Books_Destroy", "Grid"))
                  )
)
<script>
    function renderMultiSelectText(selectListArray) {
        if (selectListArray != undefined && selectListArray[0] != undefined) {


            var displayText;
            $.each(selectListArray, function (index) {
                if (displayText == undefined)
                    displayText = selectListArray[index].AuthorName + ', ';
                else displayText = displayText + selectListArray[index].AuthorName + ', ';
            });
            //remove the trailing ', '
            return displayText.slice(0, -2);
        }
        else
            return "";
    }
</script>
<!-- <script>
    function renderMultiSelectText(selectListArray) {
        if (selectListArray != undefined && selectListArray[0] != undefined) {


            var displayText;
            $.each(selectListArray, function (index) {
                if (displayText == undefined)
                    displayText = selectListArray[index].Text + ', ';
                else displayText = displayText + selectListArray[index].Text + ', ';
            });
            //remove the trailing ', '
            return displayText.slice(0, -2);
        }
        else
            return "";
    }
</script>
    -->
